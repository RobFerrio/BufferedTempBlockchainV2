1 - Compilare il contratto .sol per generare i file .abi e .bin
    Il modo più rapido è usando l'immagine docker di solc:
    docker run -v /local/path:/sources ethereum/solc:stable -o /sources/output --abi --bin /sources/Contract.sol
    (/local/path = path del contratto e Contract.sol nome del contratto, l'output andrà nella cartella output) => già fatto

2 - Lanciare il network blockchain
    Basta lanciare docker-compose up dalla cartella Network

3 - Deploy del contratto
    Usare lo script di deploy con node deploy.js (è necessario installare i node_modules prima => npm install)

NB - I seguenti script usano la libreria Bull, che richiede un server Redis su localhost:6379 (default)
    Una piccola guida per l'installazione e l'avvio su Raspberry è presente al seguente indirizzo:
    https://amalgjose.com/2020/08/11/how-to-install-redis-in-raspberry-pi/

4 - Lanciare le misure e inviarle alla Blockchain
    node measure.js
    
(5) Osservare le transazioni
    node observe.js
    
(6) Recuperare le misure
    node get.js

NB - Il file .env contiene le variabili d'ambiente usati dagli script:
    WEB3_PROVIDER_URI           => Indirizzo JSON-RPC
    SIGNER_LOCAL_PRIVATE_KEY    => Chiave privata account eth
    SIGNER_LOCAL_ADDRESS        => Indirizzo account eth

    La chiave privata NON deve essere condivisa, qui c'è per comodità visto che è solo un test

